#!/bin/bash

################ common header identical except for usage, getopts etc #########################################################################################################
shopt -s extglob

Usage() {
  cat <<EOF
usage: ${0##*/} [options] distro dir

  Currently this script takes three options
  and 1 argument
  -d < distro >
  -d <kali|stable|unstable|testing|ubuntu>
  
  -n <no modding> do not mod the pakage just
  build
  
  -i < include the built packages into your
  custom repo>
  
  -g < building from git sources >
  
  This script uses pbuilder and reprepro
  to build the package in the current dir
  result is found at the location
  specified in aaa-master-configure
  as aaa_build_result
  

EOF
}



if [[ $1 = @(-h|--help) ]]; then
  Usage
  exit 1
fi

#source common functions
if [[ -r /usr/bin/aaa-common-functions ]]; then
	. /usr/bin/aaa-common-functions
	if [[ ! $? -eq 0 ]]; then
		echo " failed to source common functions at /usr/bin/aaa-common-functions"
		echo "quitting !! "
		exit 1
	fi
else
	echo " failed to find common functions at /usr/bin/aaa-common-functions"
	echo "quitting !! "
	exit 1
fi

#source settings
if [ -r $HOME/.aaa_settings ]; then
  Info "found a settings file.. reading it"
  . $HOME/.aaa_settings
fi

# get options and arguments http://wiki.bash-hackers.org/howto/getopts_tutorial
export AAA_DEBIAN_DISTRO=""
export AAA_SUPRESS_LOCAL_PBUILDERRC="yes"
#remove previous run config if any, will be rewritten when aaa-master-config is sourced
#if no command arguments /etc/pbuilderrc is used instead which is  fallback
rm -rf $HOME/.pbuilderrc

while getopts ":d:nig" opt; do
  case $opt in
    d) Info "-d $OPTARG" 
		case $OPTARG in
	kali|testing|unstable|stable|ubuntu) Info "-d $OPTARG is valid, building for $OPTARG"
										export AAA_DEBIAN_DISTRO="$OPTARG"
										export AAA_SUPRESS_LOCAL_PBUILDERRC="no" ;;
									  *) Fuck "<-d $OPTARG> is not valid, needs to be <-d kali,stable,unstable,testing or ubuntu>"  ;;
		esac ;;
	n) no_mod=1 
		Info "-n passed, will not mod changes file" ;;
	i) include_deb=1 
		Info "-i passed, will include result dsc in custom repo" ;;
	g) git_build=yes
		Info "-i passed, will include result dsc in custom repo" ;;
   \?) Fuck "Invalid option: -$OPTARG" ;;
    :) Fuck "Option -$OPTARG requires a distro name, kali,stable,unstable,testing or ubuntu" ;;
  esac
done
#shift the -d and argument out the way http://wiki.bash-hackers.org/howto/getopts_tutorial
shift $((OPTIND-1))
#and lets parse it
[[ -z $1 ]] && Fuck "need a directory target"

#source config
if [ -r /usr/share/aaa/aaa-master-config ]; then
  Info "found my master config file.. reading it"
  . /usr/share/aaa/aaa-master-config
	if [ -r $HOME/.aaa-local-config ]; then
		Info "found a local settings file.. reading it"
		. $HOME/.aaa-local-config
	fi
else
	Fuck "Failed to find master settings file quitting"
	exit 1
fi

########## end of common header #############################################################################################################################################

function ModDEbFiles()
{
	
	local version=$(dpkg-parsechangelog --show-field Version)
	local name=$(dpkg-parsechangelog --show-field Source)
	[[ $git_build == yes ]] && aaa_pkg_tag="$aaa_pkg_tag""-git$bdate"
	case "$name" in
		nemo) dch -v "$version-$aaa_pkg_tag" --distribution "$aaa_debian_distro" "recompiled for $aaa_pkg_tag by me
patch (remove_elevated_privelages_banner.patch) applied
to remove annoying red banner when running under root" ;;
	libgnome2-0|gnome-applets) dch -v "$version-$aaa_pkg_tag" --distribution "$aaa_debian_distro" "recompiled for $aaa_pkg_tag by me
only change being gvfs is now gvfs | pup-volume-monitor
in the dependencies" ;;
			compiz) dch -v "$version-$aaa_pkg_tag" --distribution "$aaa_debian_distro" "recompiled for $aaa_pkg_tag by me
many changes applied from the original ubuntu
package, all unity references removed, gconf schems
modified, other various changes" ;;
			emerald) dch -v "$version-$aaa_pkg_tag" --distribution "$aaa_debian_distro" "recompiled for $aaa_pkg_tag by me
no patches from upstream code" ;;
			gdebi) dch -v "$version-$aaa_pkg_tag" --distribution "$aaa_debian_distro" "recompiled for $aaa_pkg_tag by me
all references of gksu removed and likewise
for the dependencies" ;;
			*) dch -v "$version-$aaa_pkg_tag" --distribution "$aaa_debian_distro" "recompiled for $aaa_pkg_tag by me" ;;	
	esac
# set package type
#MakeADir "./debian/source"
#echo "3.0 (quilt)" > "./debian/source/format"
#ugly hack
rm -f ./debian/source/format

}

#check script dependencies
CheckMyDeps "reprepro pbuilder dpkg-source"
[[ $aaa_setup_build_base_complete == yes ]] || Fuck "this script needs the base build environment setup, run aaa_setup-build-base"
[[ $aaa_setup_build_env_complete == "yes" ]] || Fuck "this script needs the build environment setup, run aaa-setup-build-env"

#setup working dirs
CleanMyBuildArea

#update / create base immage
UpdateBase

cp -R -p "$1" $aaa_work_dir
cd "$aaa_work_dir/$1"
[[ $no_mod -eq 1 ]] || ModDEbFiles
cd ..
# build modified source package
dpkg-source --format=1.0 -b $(ls -d */)


Test pbuilder --build *.dsc

cd "$aaa_build_result"
dir
[[ $include_deb -eq 1 ]] && Test reprepro -b "$aaa_localrepo_dir" include $aaa_debian_distro *.changes


