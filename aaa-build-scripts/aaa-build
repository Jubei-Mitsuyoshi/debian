#!/bin/bash

################ common header identical except for usage, getopts etc #########################################################################################################


Usage() {
  cat <<EOF
usage: ${0##*/} [options] </path/to/pkg/dir>

  -d < distro >
  -d <kali|stable|unstable|testing|ubuntu>
  
  -i < include built .changes to local 
	repo, default from master config
	overwrtten by -d
	
  -g <also include packages into git repo>
  
  -w <also include packages into work repo>
  
  -q <supress normal output, just print
  reqired fields>
  
  -u <update/create pbuilder immage before
   build>
  
  This script uses pbuilder and reprepro
  to build the package in the current dir
  result is found at the location
  specified in aaa-master-configure
  as aaa_build_result
  

EOF
}



if [[ $1 = @(-h|--help) ]]; then
  Usage
  exit 1
fi

#source common functions
if [[ -r /usr/bin/aaa-common-functions ]]; then
	. /usr/bin/aaa-common-functions
	if [[ ! $? -eq 0 ]]; then
		echo " failed to source common functions at /usr/bin/aaa-common-functions"
		echo "quitting !! "
		exit 1
	fi
else
	echo " failed to find common functions at /usr/bin/aaa-common-functions"
	echo "quitting !! "
	exit 1
fi

#source config
if [ -r /etc/aaa-master-config ]; then
  Info "found my master config file.. reading it"
  . /etc/aaa-master-config
	if [ -r $HOME/.aaa-local-config ]; then
		Info "found a local settings file.. reading it"
		. $HOME/.aaa-local-config
	fi
else
	Fuck "Failed to find master config file quitting"
	exit 1
fi

#source settings
if [ -r $HOME/.aaa_settings ]; then
  Info "found a settings file.. reading it"
  . $HOME/.aaa_settings
fi

# get options and arguments http://wiki.bash-hackers.org/howto/getopts_tutorial

#remove previous run config if any, will be rewritten when aaa-master-config is sourced
#if no command arguments /etc/pbuilderrc is used instead which is  fallback
rm -rf $HOME/.pbuilderrc

while getopts ":ugwid:" opt; do
  case $opt in
    d) Info "< -d $OPTARG > passed" 
		case $OPTARG in
	kali|testing|unstable|stable|ubuntu) Info "-d $OPTARG is valid, building for $OPTARG"
										SwitchDistro "$OPTARG" ;;
									  *) Fuck "<-d $OPTARG> is not valid, needs to be <-d kali,stable,unstable,testing or ubuntu>" ;;
		esac ;;
	u) update=1 ;;
	q) quiet=1 ;;
	i) add_to_repo=1 ;;
	g) add_to_git_repo=1 ;;
	w) add_to_work_repo=1 ;;
   \?) Fuck "Invalid option: -$OPTARG" ;;
    :) Fuck "Option -$OPTARG requires a distro name, kali,stable,unstable,testing or ubuntu" ;;
  esac
done
#shift the options and args out the way http://wiki.bash-hackers.org/howto/getopts_tutorial
shift $((OPTIND-1))
#and lets parse it

[[ -z $1 ]] && Fuck "need directory target"
[[ -d $1/debian ]] || Fuck "target dir does not contain a debian subdir"




########## end of common header #############################################################################################################################################

[[ "$(id -u)" != "0" ]] && Fuck "This script must be run as root"
	
	
	#check script dependencies
	CheckMyDeps "reprepro pbuilder dpkg-source"
	[[ $aaa_setup_build_base_complete == yes ]] || Fuck "this script needs the base build environment setup, run aaa_setup-build-base"
	[[ $aaa_setup_build_env_complete == "yes" ]] || Fuck "this script needs the build environment setup, run aaa-setup-build-env"


if [[ $quiet -eq 1 ]]; then

	#setup working dirs
	rm -rf "$aaa_work_dir" > /dev/null 2>&1
	rm -rf "$aaa_build_location" > /dev/null 2>&1
	rm -rf "$aaa_build_result" > /dev/null 2>&1
	
	mkdir -p "$aaa_build_location" > /dev/null 2>&1 || exit 1
	mkdir -p "$aaa_work_dir" > /dev/null 2>&1 || exit 1
	
	#update / create base immage
	if [[ -e "$aaa_base_gz_dir/$aaa_base_gz" ]]; then
		if [[ $update -eq 1 ]]; then
			pbuilder --update > /dev/null 2>&1 || exit 1
		fi
	else
		if [[ $update -eq 1 ]]; then
			pbuilder --create > /dev/null 2>&1 || exit 1
		fi
	fi

	
	# build  source package
	dpkg-source -b "$1" > /dev/null 2>&1  || exit 1
	
	pbuilder --build *.dsc > /dev/null 2>&1  || exit 1
	
	cd "$aaa_build_result"
	
	[[ $add_to_repo -eq 1 ]] && CleanMyRepo "$aaa_localrepo_dir" "$aaa_debian_distro" > /dev/null 2>&1 || exit 1
	[[ $add_to_repo -eq 1 ]] && reprepro -b "$aaa_localrepo_dir" include "$aaa_debian_distro" *.changes > /dev/null 2>&1 || exit 1
	[[ $add_to_work_repo -eq 1 ]] && CleanMyRepo "$aaa_localrepo_dir" "$aaa_work_repo" > /dev/null 2>&1 || exit 1
	[[ $add_to_work_repo -eq 1 ]] && reprepro -b "$aaa_localrepo_dir" includedeb "$aaa_work_repo" *.deb > /dev/null 2>&1 || exit 1
	[[ $add_to_git_repo -eq 1 ]] && CleanMyRepo "$aaa_git_repo_dir" "$aaa_debian_distro" > /dev/null 2>&1 || exit 1
	[[ $add_to_git_repo -eq 1 ]] && reprepro -b "$aaa_git_repo_dir" "include $aaa_debian_distro *.changes" > /dev/null 2>&1 || exit 1
	
	list=$(ls *.deb)
	for output in $list; do
		echo ${output%.deb}
	done

else

	#setup working dirs
	CleanMyBuildArea
	
	#update / create base immage
	[[ $update -eq 1 ]] && UpdateBase
	
	
	# build  source package
	Test dpkg-source -b "$1"
	
	Test pbuilder --build *.dsc
	
	cd "$aaa_build_result"
	
	if [[ $add_to_repo -eq 1 ]]; then
		CleanMyRepo "$aaa_localrepo_dir" "$aaa_debian_distro"
		Test reprepro -Vb "$aaa_localrepo_dir" include "$aaa_debian_distro" *.changes
	fi
	if [[ $add_to_work_repo -eq 1 ]]; then
		CleanMyRepo "$aaa_localrepo_dir" "$aaa_work_repo"
		Test reprepro -Vb "$aaa_localrepo_dir" includedeb "$aaa_work_repo" *.deb
	fi
	if [[ $add_to_git_repo -eq 1 ]]; then
		CleanMyRepo "$aaa_git_repo_dir" "$aaa_debian_distro"
		Test reprepro -Vb "$aaa_git_repo_dir" include "$aaa_debian_distro" *.changes
	fi
fi

