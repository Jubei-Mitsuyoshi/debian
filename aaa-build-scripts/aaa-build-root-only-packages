#!/bin/bash


################ common header identical except for usage, getopts etc #########################################################################################################
shopt -s extglob


bdate=$(date +%Y%m%d-%H%M%S)

Usage() {
  cat <<EOF
usage: ${0##*/}

	Currently this script takes one option
  and one argument
  -d < distro >
  -d <kali|stable|unstable|testing|ubuntu>
  
    This script uses pbuilder and reprepro
  to build a set of packages, the common
  theme of which is to remove access rights
  checks thus speeding up the packages

EOF
}

if [[ $1 = @(-h|--help) ]]; then
  Usage
  exit 1
fi

#source common functions
if [[ -r /usr/bin/aaa-common-functions ]]; then
	. /usr/bin/aaa-common-functions
	if [[ ! $? -eq 0 ]]; then
		echo " failed to source common functions at /usr/bin/aaa-common-functions"
		echo "quitting !! "
	fi
else
	echo " failed to find common functions at /usr/bin/aaa-common-functions"
	echo "setting up common aaa environment"
	echo "quitting !! "
fi


#source config
if [ -r /usr/share/aaa/aaa-master-config ]; then
  Info "found my master config file.. reading it"
  . /usr/share/aaa/aaa-master-config
	if [ -r $HOME/.aaa-local-config ]; then
		Info "found a local settings file.. reading it"
		. $HOME/.aaa-local-config
	fi
else
	Fuck "Failed to find master settings file quitting"
	exit 1
fi

CheckMyDeps "reprepro pbuilder dpkg"
[[ $aaa_setup_build_base_complete == yes ]] || Fuck "this script needs the base build environment setup, run aaa_setup-build-base"
[[ $aaa_setup_build_env_complete == "yes" ]] || Fuck "this script needs the build environment setup, run aaa-setup-build-env"



root_only_file_list="gdebi timeshift"


#setup working dir

CleanMyBuildArea
MakeADir "$aaa_pupvm_cache_dir/$aaa_debian_distro/$bdate"

#update / create base immage
UpdateBase

cd "$aaa_work_dir"


for pkg_working in $mod_file_list ; do
	Test apt-get download $pkg_working
	pkg_name=$(find . -maxdepth 1 -mindepth 1 -type f)
	ProcessBeb $aaa_work_dir ${pkg_name#./}
	Test dpkg -i ${pkg_name#./}
	find . -maxdepth 1 -mindepth 1 -type f -exec mv -f '{}' "$aaa_pupvm_cache_dir/$aaa_debian_distro/$bdate" \;
done

cd $HOME

DownLoad "http://ftp.dk.debian.org/debian/pool/main/g/gnome-disk-utility/gnome-disk-utility_3.0.2-3_amd64.deb"
gdebi -o="--no-upgrade --no-install-recommends" -n gnome-disk-utility_3.0.2-3_amd64.deb

cd "$aaa_work_dir"
CloneIt "aaa-pup-volume-monitor" "git://github.com/Jubei-Mitsuyoshi"

aaa_escape=0
while [[ $aaa_escape -eq 0 ]]; do
	Info "downloading git://github.com/linuxmint/$1.git"
	git clone "git://github.com/Jubei-Mitsuyoshi/aaa-pup-volume-monitor.git"
	if [[ ! $? -eq 0 ]]; then
		Warn "git clone git://github.com/Jubei-Mitsuyoshi/aaa-pup-volume-monitor.git,, bugged out, mostly due to bad internet"
		Warn "since with this build i cant miss a package i need to try again"
		Warn "if thats not good for you ${aaa_ctrl_c} to quit"
		AnyKey
	else
		aaa_escape=1
	fi
done

Test mv -f "aaa-pup-volume-monitor" "$aaa_work_dir"



Test pbuilder --build *.dsc

cd "$aaa_build_result"

gdebi -o="--no-upgrade --no-install-recommends" -n *.deb



####################### build all the no root git packages and install em




