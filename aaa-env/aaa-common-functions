#!/bin/bash

# Avoid any encoding problems
export LANG=C

# check if messages are to be printed using color
unset txtrst txtbld bldblu bldgrn bldred bldylw
if [[ -t 2 ]]; then
	# prefer terminal safe colobldred and bold text when tput is supported
	if tput setaf 0 &>/dev/null; then
		txtrst="$(tput sgr0)"
		txtbld="$(tput bold)"
		bldblu="${txtbld}$(tput setaf 4)"
		bldgrn="${txtbld}$(tput setaf 2)"
		bldred="${txtbld}$(tput setaf 1)"
		bldylw="${txtbld}$(tput setaf 3)"
		bldpur="${txtbld}$(tput setaf 5)"
		bldcyn="${txtbld}$(tput setaf 6)"
		bldwht="${txtbld}$(tput setaf 7)"
		txtblu="$(tput setaf 4)"
		txtgrn="$(tput setaf 2)"
		txtred="$(tput setaf 1)"
		txtpur="$(tput setaf 5)"
		txtylw="$(tput setaf 3)"
		txtcyn="$(tput setaf 6)"
		txtwht="$(tput setaf 7)"
	else
		txtrst="\e[1;0m"
		txtbld="\e[1;1m"
		bldblu="${txtbld}\e[1;34m"
		bldgrn="${txtbld}\e[1;32m"
		bldred="${txtbld}\e[1;31m"
		bldylw="${txtbld}\e[1;33m"
		bldpur="${txtbld}\e[1;35m" # purple
		bldcyn="${txtbld}\e[1;36m" # cyan
		bldwht="${txtbld}\e[1;37m" # white
		txtred='\e[0;31m' # red
		txtgrn='\e[0;32m' # green
		txtylw='\e[0;33m' # yellow
		txtblu='\e[0;34m' # blue
		txtpur='\e[0;35m' # purple
		txtcyn='\e[0;36m' # cyan
		txtwht='\e[0;37m' # white
	fi
fi
readonly txtrst txtbld bldblu bldgrn bldred bldylw txtred txtgrn txtylw txtblu txtpur txtcyn txtwht

	
	# Feedback indicators
	aaa_any_key="${bldblu} ANY KEY ${bldwht}"
	aaa_any_other_key="${bldblu} ANY OTHER KEY ${bldwht}"
	aaa_ctrl_c="${bldcyn} CTRL-C ${bldwht}"



# dialog functions *********************************************************************************************************************************************
#***************************************************************************************************************************************************************



function Info()
{

	echo -e "${bldgrn}info-->${bldwht}$@${txtrst}"
}


 function AnyKey()
{
		Info "press ${aaa_any_key} to continue"
		read -n1 -s
}
		
function Fuck()
{
		echo -e "${bldred}ERROR!!!!!!-->${bldwht}$@${txtrst}"
		exit 2
}


function Block()
{

		echo -e "${bldblu}block-->${bldwht}$@${txtrst}"
}

function Warn()
{

		echo -e "${bldylw}WARNING-->${bldwht}$@${txtrst}"
}

function Debug()
{

		echo -e "${bldpur}debug-->${bldwht}$@${txtrst}"
		AnyKey
}

function MenuInactive()
{
	#argument 1 menu key
		# x .. key to display
	#argument 2 text to display
		# xxx .. text to display...
		
		echo -e "${bldwht}key======  ${bldblu}$1${txtcyn} $2 ${txtrst}"
}

function MenuActive()
{
	#argument 1 menu key
		# x .. key to display
	#argument 2 text to display
		# xxx .. text to display...
		
		echo -e "${bldwht}key======  ${bldblu}$1${txtgrn} $2 ${txtrst}"
}

function Test()
{
	
        "$@" || Fuck "$@ failed"
  
}



function CheckMyDeps()
{
	
	#first argument space delimited list of progs to check for
		#xxxxxx ...variable name name
	
for _checks in $1; do
	command -v $_checks >/dev/null 2>&1
	if [[ ! $? -eq 0 ]]; then
		Warn "----$_checks------ is a dependency for this script, want me to install it?"
		MenuActive "q" "to quit and install $_checks yourself"
		MenuActive "i" "to apt-get install $_checks"
		read -s -n1 aaa_tmpchr
		if [[ ! $aaa_tmpchr == q ]]; then
			apt-get install "$_checks*"
		else
			Fuck "----$_checks------ is a dependency for this script,... quitting untill its met"
		fi
	else
		aaa_escape=1
	fi
done


}





CheckMyDeps "wget pbuilder reprepro cat grep"






function SaveSettings()
{



	#first argument is setting variable
		#xxxxxx ...variable name name
	#second argument is value
		#xxxxxx ... value
		
	#if no settings file exists create blank one
	if [[ ! -e "$HOME/.aaa_settings" ]]; then
		echo "#aaa writing initial settings" > "$HOME/.aaa_settings"
	fi
		
	#parse settings file
	#if setting exists delete that line, write new one at same place 
	if [[ $(cat "$HOME/.aaa_settings" | grep "$1") ]]; then
	
		sed -i "s/.*$1.*/$1=\"$2\"/" "$HOME/.aaa_settings"
		if [[ ! $? -eq 0 ]]; then
			Fuck "could not replace line in $HOME/.aaa_settings"
			return 1
		fi
	else
	# if does not exist write new one at bottom
		echo "$1=\"$2\"" >> "$HOME/.aaa_settings"
		if [[ ! $? -eq 0 ]]; then
			Fuck "could not append a line to $HOME/.aaa_settings"
			return 1
		fi
	fi
	return 0
	
}


function MakeADir()
{
	
	#first argument dir path
		#xxxxxx ...variable name name
	
	if [[ ! -d "$1" ]]; then
		Test mkdir -p "$1"
	fi
	
	
}


function DownLoad()
{
	
	#first argument dl link
		#xxxxxx ...variable name name
		
		
aaa_escape=0
while [[ $aaa_escape -eq 0 ]]; do
	wget "$1"
	if [[ ! $? -eq 0 ]]; then
		Warn "wget $1,, bugged out, mostly due to bad internet"
		Warn "since with this build i cant miss this download i need to try again"
		Warn "if thats not good for you ${aaa_ctrl_c} to quit"
		AnyKey
	else
		aaa_escape=1
	fi
done
	
	
}


function CleanMyBuildArea()
{
	local dir_exists
dir_exists=0
if [[ -d "$aaa_work_dir" ]]; then
	Warn "$aaa_work_dir already exists"
	dir_exists=1
fi

if [[ -d "$aaa_build_location" ]]; then
	Warn "$aaa_build_location already exists"
	dir_exists=1
fi

if [[ -d "$aaa_build_result" ]]; then
	Warn "$aaa_build_result already exists"
	dir_exists=1
fi

if [[ "$dir_exists" -eq 1 ]]; then
	Warn "i need to clean it out"
	Warn "if thats not good for you ${aaa_ctrl_c} to quit"
	AnyKey
	rm -rf "$aaa_work_dir"
	rm -rf "$aaa_build_location"
	rm -rf "$aaa_build_result"
fi
		

MakeADir "$aaa_build_location"
MakeADir "$aaa_work_dir"
MakeADir "$aaa_build_result"


}


function UpdateBase()
{

Block "creating/updating base pbuilder image"
aaa_escape=0
if [[ -e "$aaa_base_gz_dir/$aaa_base_gz" ]]; then
	while [[ $aaa_escape -eq 0 ]]; do
		pbuilder --update
		if [[ ! $? -eq 0 ]]; then
			Warn "pbuilder --update bugged out, mostly due to failed downloads"
			Warn "hence going to try again, if thats not good for you ${aaa_ctrl_c} to quit"
			AnyKey
		else
			aaa_escape=1
		fi
	done
else
	while [[ $aaa_escape -eq 0 ]]; do
		pbuilder --create
		if [[ ! $? -eq 0 ]]; then
			Warn "pbuilder --update bugged out, mostly due to failed downloads"
			Warn "hence going to try again, if thats not good for you ${aaa_ctrl_c} to quit"
			AnyKey
		else
			aaa_escape=1
		fi
	done
fi


}



function CleanMyRepo()
{

	#first argument repo name
		#xxxxxx ...variable name name
		
	#second argument space delimited list of package names to match
		#xxxxxx ...variable name name
Warn "removing all previous $2 packages"
for pack_names in $2; do
	reprepro -Vb "$aaa_localrepo_dir" removematched $1 "*$pack_names*"  > /dev/null 2>&1
done

}


function PatchEm()
{

	case "$1" in
		nemo) patch -p1 < "$aaa_patch_dir/remove_elevated_privelages_banner.patch" 
			#allow pup-vm to replace gvfs
			sed -i 's/gvfs (>= 1.3.2)/gvfs (>= 1.3.2) | pup-volume-monitor/' ./debian/control ;;
			
			nemo-preview) mkdir -p aaa-tmp
							cd aaa-tmp
							#DownLoad "http://dk.archive.ubuntu.com/ubuntu/pool/main/i/intltool/intltool_0.50.2-2_all.deb"
							#reprepro -b "$aaa_localrepo_dir" includedeb  $aaa_work_repo *.deb || Fuck "something wrong with-- reprepro ---check the output"
							rm -f * >/dev/null 2>&1 
							cd ..
							rm -fr aaa-tmp ;;
			libgnome2-0*) sed -i 's/gvfs/gvfs | pup-volume-monitor/' ./DEBIAN/control ;;
			gnome-applets*) sed -i 's/gvfs/gvfs | pup-volume-monitor/' ./DEBIAN/control ;;
	
	esac
 

}


function ProcessBeb() {
rm -fr "$1/tmp"
MakeADir "$1/tmp"
dpkg-deb -x *.deb "$1/tmp"
dpkg-deb --control *.deb "$1/tmp/DEBIAN"
cd "$1/tmp"
PatchEm "$2"
cd ..
rm -f *.deb
dpkg -b "$1/tmp" "$2"


}




function FreshInstall()
{

apt-get update
#apt-get dist-upgrade
/etc/init.d/gdm3 stop > /dev/null 2>&1
apt-get --no-upgrade --no-install-recommends install xinit
apt-get --no-upgrade purge gdm3
apt-get --no-upgrade purge "gnome-settings-daemon*"
apt-get --no-upgrade purge "gnome-session*"
apt-get --no-upgrade --no-install-recommends  install "cinnamon*" "muffin*" "cjs*" "nemo*"

Info "chose muffin here in the next dialog"
update-alternatives --config x-window-manager

Info "chose cinnamon-session in the next dialog"
update-alternatives --config x-session-manager


Info "now type startx"
}





