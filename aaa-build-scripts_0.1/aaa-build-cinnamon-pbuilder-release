#!/bin/bash


################ common header identical except for usage, getopts etc #########################################################################################################
shopt -s extglob

cd "$HOME"
bdate=$(date +%Y%m%d-%H%M%S)

Usage() {
  cat <<EOF
usage: ${0##*/} [options] distro

  Currently this script takes two options
  and one argument
  -d < distro >
  -d <kali|stable|unstable|testing|ubuntu>
  unlike the git version this script
  builds the latest releases

EOF
}

if [[ $1 = @(-h|--help) ]]; then
  Usage
  exit 1
fi

#source common functions
if [[ -r /usr/bin/aaa-common-functions ]]; then
	. /usr/bin/aaa-common-functions
	if [[ ! $? -eq 0 ]]; then
		echo " failed to source common functions at /usr/bin/aaa-common-functions"
		echo "quitting !! "
		exit 1
	fi
else
	echo " failed to find common functions at /usr/bin/aaa-common-functions"
	echo "quitting !! "
	exit 1
fi

#source settings
if [ -r $HOME/.aaa_settings ]; then
  Info "found a settings file.. reading it"
  . $HOME/.aaa_settings
fi

# get options and arguments, if none fallback to testing
export AAA_DEBIAN_DISTRO=""
export AAA_SUPRESS_LOCAL_PBUILDERRC="yes"
#remove previous run config if any, will be rewritten when aaa-master-config is sourced
#if no command arguments /etc/pbuilderrc is used instead which is testing fallback
rm -rf $HOME/.pbuilderrc

while getopts ":d:" opt; do
  case $opt in
    d) Info "-d $OPTARG" 
		case $OPTARG in
	kali|testing|unstable|stable|ubuntu) Info "-d $OPTARG is valid, building for $OPTARG"
										export AAA_DEBIAN_DISTRO="$OPTARG"
										export AAA_SUPRESS_LOCAL_PBUILDERRC="no" ;;
									  *) Fuck "<-d $OPTARG> is not valid, needs to be <-d kali,stable,unstable,testing or ubuntu>"  ;;
 
		esac ;;
   \?) Fuck "Invalid option: -$OPTARG" ;;
    :) Fuck "Option -$OPTARG requires a distro name, kali,stable,unstable,testing or ubuntu" ;;
  esac
done

#source config
if [ -r /usr/share/aaa/aaa-master-config ]; then
  Info "found my master config file.. reading it"
  . /usr/share/aaa/aaa-master-config
	if [ -r $HOME/.aaa-local-config ]; then
		Info "found a local settings file.. reading it"
		. $HOME/.aaa-local-config
	fi
else
	Fuck "Failed to find master settings file quitting"
	exit 1
fi

########## end of common header #############################################################################################################################################
#check script dependencies

CheckMyDeps "reprepro pbuilder sed cat find grep dpkg-source"
[[ $aaa_setup_build_base_complete == yes ]] || Fuck "this script needs the base build environment setup, run aaa_setup-build-base"
[[ $aaa_setup_build_env_complete == "yes" ]] || Fuck "this script needs the build environment setup, run aaa-setup-build-env"


function FailOkFilter()
{
	#argument
	#name of package
	case "$1" in
		cinnamon-bluetooth|cinnamon-screensaver|cinnamon-themes|nemo-python|nemo-compare|nemo-dropbox|nemo-fileroller|nemo-gtkhash|nemo-media-columns|nemo-pastebin|nemo-preview|nemo-rabbitvcs|nemo-seahorse|nemo-share) Warn "$1 failed to build, this is not a critical component"
			Warn "so can continue with the other components, that ok swith you?"
			Warn "ctrl-c to quit"
			AnyKey ;;
		*) Fuck "$1 failed to build and is a critical component of cinnamon, quitting !" ;;
	
	esac


}


function GetRelease()
{


release_version=$(curl -s https://github.com/linuxmint/$1/releases | grep -m 3 "/linuxmint/$1/archive/" | sed 's/.*.zip"//' | sed -n 's/.*\///p' | sed 's/".*//')
		
aaa_escape=0
while [[ $aaa_escape -eq 0 ]]; do
	wget "https://github.com/linuxmint/$1/archive/$release_version"
	if [[ ! $? -eq 0 ]]; then
		Warn "failed to download the release version of $1"
		Warn "since with this build i cant miss this download i need to try again"
		Warn "or it could be down to the webpage formate changing"
		Warn "if thats not good for you ${aaa_ctrl_c} to quit"
		AnyKey
	else
		tar -xzf "$release_version"
		rm -f "$release_version"
		aaa_escape=1
	fi
done

}




function BuildOne()
{
	
	local version=$(dpkg-parsechangelog --show-field Version)
	local name=$(dpkg-parsechangelog --show-field Source)
	dch -v "$version-$aaa_pkg_tag" --distribution "$aaa_debian_distro" "recompiled for $aaa_pkg_tag by me
with possible modifications"
	

#	echo '3.0 (quilt)' > ./debian/source/format
	rm -f ./debian/source/format
	cd ..
	

	# build modified source package
	dpkg-source --format=1.0 -b $(ls -d */)
	
	# build a binary and source
	pbuilder --build *.dsc
	if [[ $? -eq 0 ]]; then
		#add package to result repo and working repo
		cd "$aaa_build_result"
		Test reprepro -b "$aaa_localrepo_dir" includedeb $aaa_work_repo *.deb
		Test reprepro -b "$aaa_localrepo_dir" include $aaa_debian_distro *.changes
	
		#clean up
		find . -maxdepth 1 -mindepth 1 -type f -exec mv -f '{}' "$aaa_cinnamon_cache_dir/release-builds/$aaa_debian_distro/$bdate" \;
	else
		FailOkFilter "$name"
	fi
	cd $HOME
	rm -rf "$aaa_work_dir"
	rm -rf "$aaa_build_result"
	MakeADir "$aaa_work_dir"
	MakeADir "$aaa_build_result"
	
}


function BuildIt()
{
	#one argument, git repo name -- is extensions ?
if [[ $1 == "nemo-extensions" ]]; then
	cd "$cinnamon_release_dir/nemo-extensions"-*
	for _extension in $(ls -d */); do
		cd "$cinnamon_release_dir/nemo-extensions"-*
		Block "building $_extension "
		if [[ ${_extension%%/} = "git" ]]; then
			continue
		fi
		cp -R -p ${_extension%%/} $aaa_work_dir
		cd $aaa_work_dir/${_extension%%/}
		PatchEm ${_extension%%/}
		BuildOne ${_extension%%/}
	done
else
	cp -R -p "$1"-* $aaa_work_dir
	cd $aaa_work_dir/$1-*
	PatchEm "$1"
	BuildOne "$1"
fi

}


#setup working dir

CleanMyBuildArea
MakeADir "$aaa_cinnamon_cache_dir/release-builds/$aaa_debian_distro/$bdate"

#update / create base immage
UpdateBase


# clean out old repo of cinnamon packages if update

CleanMyRepo $aaa_debian_distro "cinnamon muffin nemo cjs"
CleanMyRepo  $aaa_work_repo "cinnamon muffin nemo cjs"


#check for previous working copy
if [[ -d "$cinnamon_release_dir" ]]; then
	Info "$cinnamon_release_dir already exists"
	MenuActive "k" "to keep all sources"
	MenuActive "s" "to to decide weather to keep individual sources"
	MenuActive "q" "to quit with a return of 1"
	MenuActive "any other key" "delete old directory"
	read -s -n1 aaa_tmpchr
	case "$aaa_tmpchr" in
		q) exit 1 ;;
		k) decide="keep" ;;
		s) decide="choose" ;;
		*) rm -fr $cinnamon_release_dir 
			MakeADir "$cinnamon_release_dir" ;;
	esac
else
	MakeADir "$cinnamon_release_dir" 
fi



#fetch all latest releaes and build in order, with choices over sources


for _package in $aaa_cinnamon_git_list; do
	if [ -d "$cinnamon_release_dir/$_package"-* ]; then
		Info "$cinnamon_release_dir/$_package already exists"
		case $decide in
			keep) Info "keep all sources is on! keeping source $cinnamon_release_dir/$_package"
				cd "$cinnamon_release_dir"
				BuildIt "$_package" ;;
		  choose) Info "chose to keep sources is on!"
					MenuActive "k" "to keep these sources and build from them"
					MenuActive "d" "to delete old directory and fetch fresh from git"
					MenuActive "any other key" "to skip fetching and building"
					read -s -n1 aaa_tmpchr
					case $aaa_tmpchr in
						k) Info "keeping source $cinnamon_release_dir/$_package"
							cd "$cinnamon_release_dir"
							BuildIt "$_package" ;;
						d) rm -fr "$cinnamon_release_dir/$_package"-*
							cd "$cinnamon_release_dir"
							GetRelease "$_package"
							BuildIt "$_package" ;;
						*) Info "skipping building $cinnamon_release_dir/$_package" ;;
					esac ;;
			  *) Fuck "Internal error" ;;
		esac
	else
		cd "$cinnamon_release_dir"
		GetRelease "$_package"
		BuildIt "$_package" 
	fi
done



cd $HOME
apt-get update
apt-get --no-upgrade --no-install-recommends install --reinstall "cinnamon*" "muffin*" "cjs*" "nemo*"


