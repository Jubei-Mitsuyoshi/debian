#!/bin/bash


################ common header identical except for usage, getopts etc #########################################################################################################
shopt -s extglob

cd "$HOME"
bdate=$(date +%Y%m%d-%H%M%S)

Usage() {
  cat <<EOF
usage: ${0##*/} [options] distro

  Currently this script takes one option
  and argument
  -d < distro >
  -d <kali|stable|unstable|testing|ubuntu>

EOF
}

if [[ $1 = @(-h|--help) ]]; then
  Usage
  exit 1
fi

#source common functions
if [[ -r /usr/bin/aaa-common-functions ]]; then
	. /usr/bin/aaa-common-functions
	if [[ ! $? -eq 0 ]]; then
		echo " failed to source common functions at /usr/bin/aaa-common-functions"
		echo "quitting !! "
		exit 1
	fi
else
	echo " failed to find common functions at /usr/bin/aaa-common-functions"
	echo "quitting !! "
	exit 1
fi

#source settings
if [ -r $HOME/.aaa_settings ]; then
  Info "found a settings file.. reading it"
  . $HOME/.aaa_settings
fi

# get options and arguments, if none fallback to testing
export AAA_DEBIAN_DISTRO=""
export AAA_SUPRESS_LOCAL_PBUILDERRC="yes"
#remove previous run config if any, will be rewritten when aaa-master-config is sourced
#if no command arguments /etc/pbuilderrc is used instead which is testing fallback
rm -rf $HOME/.pbuilderrc

while getopts ":d:" opt; do
  case $opt in
    d) Info "-d $OPTARG" 
		case $OPTARG in
	kali|testing|unstable|stable|ubuntu) Info "-d $OPTARG is valid, building for $OPTARG"
										export AAA_DEBIAN_DISTRO="$OPTARG"
										export AAA_SUPRESS_LOCAL_PBUILDERRC="no" ;;
									  *) Fuck "<-d $OPTARG> is not valid, needs to be <-d kali,stable,unstable,testing or ubuntu>"  ;;
 
		esac ;;
   \?) Fuck "Invalid option: -$OPTARG" ;;
    :) Fuck "Option -$OPTARG requires a distro name, kali,stable,unstable,testing or ubuntu" ;;
  esac
done

#source config
if [ -r /usr/share/aaa/aaa-master-config ]; then
  Info "found my master config file.. reading it"
  . /usr/share/aaa/aaa-master-config
	if [ -r $HOME/.aaa-local-config ]; then
		Info "found a local settings file.. reading it"
		. $HOME/.aaa-local-config
	fi
else
	Fuck "Failed to find master settings file quitting"
	exit 1
fi

########## end of common header #############################################################################################################################################
#check script dependencies

CheckMyDeps "reprepro pbuilder sed cat find grep dpkg-source"

[[ $aaa_build_env_setup_complete_yes_no == "yes" ]] || Fuck "this script needs the build environment setup, run aaa-setup-build-env"


function FailOkFilter()
{
	#argument
	#name of package
	case "$1" in
		cinnamon-bluetooth|cinnamon-screensaver|cinnamon-themes|nemo-python|nemo-compare|nemo-dropbox|nemo-fileroller|nemo-gtkhash|nemo-media-columns|nemo-pastebin|nemo-preview|nemo-rabbitvcs|nemo-seahorse|nemo-share) Warn "$1 failed to build, this is not a critical component"
			Warn "so can continue with the other components, that ok swith you?"
			Warn "ctrl-c to quit"
			AnyKey ;;
		*) Fuck "$1 failed to build and is a critical component of cinnamon, quitting !" ;;
	
	esac


}

function PatchEm()
{

	case "$1" in
		nemo) patch -p1 < "$aaa_patch_dir/remove_elevated_privelages_banner.patch" 
			#allow pup-vm to replace gvfs
			sed -i 's/gvfs (>= 1.3.2)/gvfs (>= 1.3.2) | pup-volume-monitor/' ./debian/control ;;
			
			nemo-preview) mkdir -p aaa-tmp
							cd aaa-tmp
							#DownLoad "http://dk.archive.ubuntu.com/ubuntu/pool/main/i/intltool/intltool_0.50.2-2_all.deb"
							#reprepro -b "$aaa_localrepo_dir" includedeb  $aaa_work_repo *.deb || Fuck "something wrong with-- reprepro ---check the output"
							rm -f * >/dev/null 2>&1 
							cd ..
							rm -fr aaa-tmp ;;
	
	esac


}



function BuildOne()
{
	
	#stamp pkg
	vername_raw=$(sed -n 1p "./debian/changelog" | sed 's/).*//')
	vername=$(echo "$vername_raw" | sed 's/ .*//')
	Block "building $vername "
	
	ver_number=$(echo "$vername_raw" | sed "s/$vername (//" | sed "s/-$aaa_pkg_tag//")
	Info "decided $ver_number is the version number"
	

	sed -i '1s/^/'"$vername_raw-$aaa_pkg_tag) $aaa_debian_distro"'; urgency=medium\
\
  * recompiled for '"$aaa_pkg_tag"' by me\
\
 -- '"$aaa_maintainer  $(date +"%a, %d %b %Y %H:%M:%S %z   ")\n\n/" "./debian/changelog"
	#swap maintainers to me
	aaa_old_maintainer=$(grep -F -m 1 "Maintainer" "./debian/control" | sed 's/Maintainer: //')
	sed -i "s/$aaa_old_maintainer/$aaa_maintainer/" "./debian/control"

#	echo '3.0 (quilt)' > ./debian/source/format
	rm -f ./debian/source/format
	cd ..
	
	#rename folder from relese version if necessary
	case "$vername" in
		"cinnamon") # check that dir is not called "New release etc"
					#  list dirs, format output a little    |  strip ./ from start of line | print line with "New" in it | strip everything after first -
					aaa_dir_check=$(find . -mindepth 1 -maxdepth 1 -type d  \( ! -iname ".*" \) | sed 's|^\./||g' | grep "New" | sed 's/-.*//')
					if [[ $aaa_dir_check ]]; then
						mv *New* "${aaa_dir_check,,}"
					else
						mv Cinnamon cinnamon
					fi ;;
					
	
	esac
	
	#rename source folder to keep debian packaging rules
	mv "$vername" "$vername-$ver_number"

	# build modified source package
	dpkg-source --format=1.0 -b "$vername-$ver_number"
	
	# build a binary and source
	pbuilder --build "$vername"_"$ver_number-$aaa_pkg_tag.dsc"
	if [[ $? -eq 0 ]]; then
		#add package to result repo and working repo
		cd "$aaa_build_result"
		reprepro -b "$aaa_localrepo_dir" includedeb $aaa_work_repo *.deb || Fuck "something wrong ---check the output"
		reprepro -b "$aaa_localrepo_dir" include $aaa_debian_distro "$vername"_"$ver_number-$aaa_pkg_tag""_amd64.changes" || Fuck "something wrong with-- reprepro -b $aaa_localrepo_dir include $aaa_debian_distro *.changes ---check the output"
	
		#clean up
		find . -maxdepth 1 -mindepth 1 -type f -exec mv -f '{}' "$aaa_cinnamon_cache_dir/git-builds/$aaa_debian_distro/$bdate" \;
	else
		FailOkFilter "$vername"
	fi
	cd $HOME
	rm -rf "$aaa_work_dir"
	rm -rf "$aaa_build_result"
	MakeADir "$aaa_work_dir"
	MakeADir "$aaa_build_result"
	
}


function BuildIt()
{
	#one argument, git repo name -- is extensions ?
if [[ $1 == "nemo-extensions" ]]; then
	cd "$cinnamon_git_dir/nemo-extensions"
	for _extension in $(ls -d */); do
		cd "$cinnamon_git_dir/nemo-extensions"
		Block "building $_extension "
		if [[ ${_extension%%/} = "git" ]]; then
			continue
		fi
		cp -R -p ${_extension%%/} $aaa_work_dir
		cd $aaa_work_dir/${_extension%%/}
		PatchEm ${_extension%%/}
		BuildOne ${_extension%%/}
	done
else
	cp -R -p "$1" $aaa_work_dir
	cd $aaa_work_dir/$1
	PatchEm "$1"
	BuildOne "$1"
fi

}



function CloneIt()
{
aaa_escape=0
while [[ $aaa_escape -eq 0 ]]; do
	Info "downloading git://github.com/linuxmint/$1.git"
	git clone "git://github.com/linuxmint/$1.git"
	if [[ ! $? -eq 0 ]]; then
		Warn "git clone $1,, bugged out, mostly due to bad internet"
		Warn "since with this build i cant miss a package i need to try again"
		Warn "if thats not good for you ${aaa_ctrl_c} to quit"
		AnyKey
	else
		aaa_escape=1
	fi
done
}


#setup working dir

CleanMyBuildArea
MakeADir "$aaa_cinnamon_cache_dir/git-builds/$aaa_debian_distro/$bdate"

#update / create base immage
UpdateBase


# clean out old repo of cinnamon packages if update

CleanMyRepo $aaa_debian_distro "cinnamon muffin nemo cjs"
CleanMyRepo  $aaa_work_repo "cinnamon muffin nemo cjs"


#check for previous working copy
if [[ -d "$cinnamon_git_dir" ]]; then
	Info "$cinnamon_git_dir already exists"
	MenuActive "k" "to keep all sources"
	MenuActive "s" "to to decide weather to keep individual sources"
	MenuActive "q" "to quit with a return of 1"
	MenuActive "any other key" "delete old directory"
	read -s -n1 aaa_tmpchr
	case "$aaa_tmpchr" in
		q) exit 1 ;;
		k) decide="keep" ;;
		s) decide="choose" ;;
		*) rm -fr $cinnamon_git_dir 
			MakeADir "$cinnamon_git_dir" ;;
	esac
else
	MakeADir "$cinnamon_git_dir"
fi



#clone all the latest gits and build in order, with choices over sources


for _package in $aaa_cinnamon_git_list; do
	if [ -d "$cinnamon_git_dir/$_package" ]; then
		Info "$cinnamon_git_dir/$_package already exists"
		case $decide in
			keep) Info "keep all sources is on! keeping source $cinnamon_git_dir/$_package"
				cd "$cinnamon_git_dir"
				BuildIt "$_package" ;;
		  choose) Info "chose to keep sources is on!"
					MenuActive "k" "to keep these sources and build from them"
					MenuActive "d" "to delete old directory and fetch fresh from git"
					MenuActive "any other key" "to skip fetching and building"
					read -s -n1 aaa_tmpchr
					case $aaa_tmpchr in
						k) Info "keeping source $cinnamon_git_dir/$_package"
							cd "$cinnamon_git_dir"
							BuildIt "$_package" ;;
						d) rm -fr "$cinnamon_git_dir/$_package"
							cd "$cinnamon_git_dir"
							CloneIt "$_package"
							BuildIt "$_package" ;;
						*) Info "skipping building $cinnamon_git_dir/$_package" ;;
					esac ;;
			  *) Fuck "Internal error" ;;
		esac
	else
		cd "$cinnamon_git_dir"
		CloneIt "$_package"
		BuildIt "$_package" 
	fi
done


cd $HOME
CleanMyRepo  $aaa_work_repo "cinnamon muffin nemo cjs"




#BuildIt "cinnamon-translations"

#2
#BuildIt "cinnamon-desktop"
# cinnamon-desktop-data required by libcinnamon-desktop0

#3
#BuildIt "cjs"
# libcjs0c required by libcjs-dev

#4-relevent build deps libcinnamon-desktop-dev

#BuildIt "nemo"
#libnemo-extension-dev needs libnemo-extension1 as install dep

#5
#BuildIt "cinnamon-settings-daemon"
# cinnamon-settings-daemon needs nemo data as a installation dep

#6
#BuildIt "cinnamon-session"
#cinnamon-session has cinnamon-desktop-data as an install dep

#7-relevent build deps libcinnamon-desktop-dev
#BuildIt "muffin"
#libmuffin0 needs muffin-common as install dep
#muffin needs muffin-common as install dep
#libmuffin-dev has libmuffin0 gir1.2-muffin-3.0 as install deps
#muffin-dbg has libmuffin0 as an install dep

#8 has  cinnamon-settings-daemon,cinnamon-settings-daemon-dev, as relevent build deps
#BuildIt "cinnamon-control-center"
#ibcinnamon-control-center-dev has ibcinnamon-control-center-dev as a install dep
# cinnamon-control-center has cinnamon-control-center-data, cinnamon-desktop-data,cinnamon-settings-daemon,cinnamon-translations as installdeps


#9 has libcinnamon-desktop-dev, libmuffin-dev as relevent build deps
#BuildIt "Cinnamon"
#has cinnamon-common cinnamon-translations,cinnamon-control-center,cinnamon-settings-daemon,cinnamon-session,cinnamon-desktop-data as install deps
#has cinnamon as relevent install dep



#10has cinnamon-settings-daemon, cinnamon-settings-daemon-dev,cinnamon-settings-daemon-dev,libcinnamon-control-center-dev, libcinnamon-desktop-dev as releven build deps
#BuildIt "cinnamon-bluetooth"
# cinnamon bluetooth has cinnamon-control-center,cinnamon-settings-daemon,cinnamon-translations, as relevent install deps


#11has libcinnamon-desktop-dev as relevent build deps
#BuildIt "cinnamon-screensaver"
#has cinnamon-desktop-data cinnamon,cinnamon-translations as relevent install deps

#12-needed by

