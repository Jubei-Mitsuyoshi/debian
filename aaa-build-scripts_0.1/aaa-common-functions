#!/bin/bash

shopt -s extglob


	txtred='\e[0;31m' # red
	txtgrn='\e[0;32m' # green
	txtylw='\e[0;33m' # yellow
	txtblu='\e[0;34m' # blue
	txtpur='\e[0;35m' # purple
	txtcyn='\e[0;36m' # cyan
	txtwht='\e[0;37m' # white
	bldred='\e[1;31m' # red - Bold
	bldgrn='\e[1;32m' # green
	bldylw='\e[1;33m' # yellow
	bldblu='\e[1;34m' # blue
	bldpur='\e[1;35m' # purple
	bldcyn='\e[1;36m' # cyan
	bldwht='\e[1;37m' # white
	txtund=$(tput sgr 0 1) # Underline
	txtbld=$(tput bold) # Bold
	txtrst='\e[0m' # Text reset
	
	# Feedback indicators
	aaa_any_key="${bldblu} ANY KEY ${bldwht}"
	aaa_any_other_key="${bldblu} ANY OTHER KEY ${bldwht}"
	aaa_ctrl_c="${bldcyn} CTRL-C ${bldwht}"



# dialog functions *********************************************************************************************************************************************
#***************************************************************************************************************************************************************

function AnyKey()
{
		echo -e " ${bldgrn}aaa-->${bldwht} press ${aaa_any_key} to continue  ${txtrst}"
		read -n1 -s
}

function Info()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e " ${bldgrn}info-->${bldwht}$1${txtrst}"
		
function Fuck()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e "${bldred}ERROR!!!!!!-->$1${txtrst}"
		exit 2
}

}

function Block()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e "${bldblu}block-->${txtgrn}$1${txtrst}"
}

function Warn()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e "  ${bldylw}WARNING-->${bldwht}$1${txtrst}"
}

function Debug()
{

	#argument 1 text to display
		# xxx .. text to display...
		
		echo -e "${bldpur}debug-->${bldwht}$1${txtrst}"
		AnyKey
}

function MenuInactive()
{
	#argument 1 menu key
		# x .. key to display
	#argument 2 text to display
		# xxx .. text to display...
		
		echo -e "${bldwht}key======  ${bldblu}$1${txtcyn} $2 ${txtrst}"
}

function MenuActive()
{
	#argument 1 menu key
		# x .. key to display
	#argument 2 text to display
		# xxx .. text to display...
		
		echo -e "${bldwht}key======  ${bldblu}$1${txtgrn} $2 ${txtrst}"
}

function CheckMyDeps()
{
	
	#first argument space delimited list of progs to check for
		#xxxxxx ...variable name name
	
for _checks in $1; do
	command -v $_checks >/dev/null 2>&1 || Fuck "----$1------ is a dependency for this script, plese install"
done


}





CheckMyDeps "wget pbuilder reprepro cat grep"






function SaveSettings()
{



	#first argument is setting variable
		#xxxxxx ...variable name name
	#second argument is value
		#xxxxxx ... value
		
	#if no settings file exists create blank one
	if [[ ! -e "$HOME/.aaa_settings" ]]; then
		echo "#aaa writing initial settings" > "$HOME/.aaa_settings"
	fi
		
	#parse settings file
	#if setting exists delete that line, write new one at same place 
	if [[ $(cat "$HOME/.aaa_settings" | grep "$1") ]]; then
	
		sed -i "s/.*$1.*/$1=\"$2\"/" "$HOME/.aaa_settings"
		if [[ ! $? -eq 0 ]]; then
			Fuck "could not replace line in $HOME/.aaa_settings"
			return 1
		fi
	else
	# if does not exist write new one at bottom
		echo "$1=\"$2\"" >> "$HOME/.aaa_settings"
		if [[ ! $? -eq 0 ]]; then
			Fuck "could not append a line to $HOME/.aaa_settings"
			return 1
		fi
	fi
	return 0
	
}


function MakeADir()
{
	
	#first argument dir path
		#xxxxxx ...variable name name
	
	if [[ ! -d "$1" ]]; then
			mkdir -p "$1" || Fuck "failed to make $1 directory"
	fi
	
	
}


function DownLoad()
{
	
	#first argument dl link
		#xxxxxx ...variable name name
		
		
aaa_escape=0
while [[ $aaa_escape -eq 0 ]]; do
	wget "$1"
	if [[ ! $? -eq 0 ]]; then
		Warn "wget $1,, bugged out, mostly due to bad internet"
		Warn "since with this build i cant miss this download i need to try again"
		Warn "if thats not good for you ${aaa_ctrl_c} to quit"
		AnyKey
	else
		aaa_escape=1
	fi
done
	
	
}


function CleanMyBuildArea()
{
	local dir_exists
dir_exists=0
if [[ -d "$aaa_work_dir" ]]; then
	Warn "$aaa_work_dir already exists"
	dir_exists=1
fi

if [[ -d "$aaa_build_location" ]]; then
	Warn "$aaa_build_location already exists"
	dir_exists=1
fi

if [[ -d "$aaa_build_result" ]]; then
	Warn "$aaa_build_result already exists"
	dir_exists=1
fi

if [[ "$dir_exists" -eq 1 ]]; then
	Warn "i need to clean it out"
	Warn "if thats not good for you ${aaa_ctrl_c} to quit"
	AnyKey
	rm -rf "$aaa_work_dir"
	rm -rf "$aaa_build_location"
	rm -rf "$aaa_build_result"
fi
		

MakeADir "$aaa_build_location"
MakeADir "$aaa_work_dir"
MakeADir "$aaa_build_result"


}


function UpdateBase()
{

Block "creating/updating base pbuilder image"

if [[ $aaa_build_env_setup_complete_yes_no == "yes" ]]; then

	aaa_escape=0
	if [[ -e "$aaa_base_gz_dir/$aaa_base_gz" ]]; then
		while [[ $aaa_escape -eq 0 ]]; do
			pbuilder --update
			if [[ ! $? -eq 0 ]]; then
				Warn "pbuilder --update bugged out, mostly due to failed downloads"
				Warn "hence going to try again, if thats not good for you ${aaa_ctrl_c} to quit"
				AnyKey
			else
				aaa_escape=1
			fi
		done
	else
		while [[ $aaa_escape -eq 0 ]]; do
			pbuilder --create
			if [[ ! $? -eq 0 ]]; then
				Warn "pbuilder --update bugged out, mostly due to failed downloads"
				Warn "hence going to try again, if thats not good for you ${aaa_ctrl_c} to quit"
				AnyKey
			else
				aaa_escape=1
			fi
		done
	fi

else
	Fuck "updating or creating requires $HOME/.pbuilderrc and aaa-setup-build-env to have been run"
fi

}



function CleanMyRepo()
{

	#first argument repo name
		#xxxxxx ...variable name name
		
	#second argument space delimited list of package names to match
		#xxxxxx ...variable name name
Warn "removing all previous $2 packages"
for pack_names in $2; do
	reprepro -Vb "$aaa_localrepo_dir" removematched $1 "*$pack_names*"  > /dev/null 2>&1
done

}



