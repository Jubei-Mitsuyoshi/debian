#!/bin/bash

################ common header identical except for usage, getopts etc #########################################################################################################
Usage() {
  cat <<EOF
usage: ${0##*/} [options] distro dir

  Currently this script takes three options
  and 1 argument
  -d < distro >
  -d <kali|stable|unstable|testing|ubuntu>
  
  -n <no modding> do not mod the pakage just
  build
  
  -i < include the built packages into your
  custom repo>
  
  -g < building from git sources >
  
  This script uses pbuilder and reprepro
  to build the package in the current dir
  result is found at the location
  specified in aaa-master-configure
  as aaa_build_result
  

EOF
}



if [[ $1 = @(-h|--help) ]]; then
  Usage
  exit 1
fi

#source common functions
if [[ -r /usr/bin/aaa-common-functions ]]; then
	. /usr/bin/aaa-common-functions
	if [[ ! $? -eq 0 ]]; then
		echo " failed to source common functions at /usr/bin/aaa-common-functions"
		echo "quitting !! "
		exit 1
	fi
else
	echo " failed to find common functions at /usr/bin/aaa-common-functions"
	echo "quitting !! "
	exit 1
fi

#source settings
if [ -r $HOME/.aaa_settings ]; then
  Info "found a settings file.. reading it"
  . $HOME/.aaa_settings
fi

#source config
if [ -r /usr/share/aaa/aaa-master-config ]; then
  Info "found my master config file.. reading it"
  . /usr/share/aaa/aaa-master-config
	if [ -r $HOME/.aaa-local-config ]; then
		Info "found a local settings file.. reading it"
		. $HOME/.aaa-local-config
	fi
else
	Fuck "Failed to find master settings file quitting"
	exit 1
fi


#setup working dirs
CleanMyBuildArea

# Memstat.sh is a shell script that calculates linux memory usage for each program / application.
# Script outputs shared and private memory for each program running in linux. Since memory calculation is bit complex,
# this shell script tries best to find more accurate results. Script use 2 files ie /proc//status (to get name of process)
# and /proc//smaps for memory statistic of process. Then script will convert all data into Kb, Mb, Gb.
# Also make sure you install bc command.


#Source : http://www.linoxide.com/linux-shell-script/linux-memory-usage-program/
#Parent : http://www.linoxide.com/guide/scripts-pdf.html

# Make sure only root can run our script

[[ "$(id -u)" != "0" ]] && Fuck "This script must be run as root"

### Functions
#This function will count memory statistic for passed PID
get_process_mem ()
{
PID=$1
#we need to check if 2 files exist
if [ -f /proc/$PID/status ];
then
        if [ -f /proc/$PID/smaps ];
        then
                #here we count memory usage, Pss, Private and Shared = Pss-Private
                Pss=`cat /proc/$PID/smaps | grep -e "^Pss:" | awk '{print $2}'| paste -sd+ | bc `
                Private=`cat /proc/$PID/smaps | grep -e "^Private" | awk '{print $2}'| paste -sd+ | bc `
                #we need to be sure that we count Pss and Private memory, to avoid errors
                if [ x"$Rss" != "x" -o x"$Private" != "x" ];
                then

                        let Shared=${Pss}-${Private}
                        Name=`cat /proc/$PID/status | grep -e "^Name:" |cut -d':' -f2`
                        #we keep all results in bytes
                        let Shared=${Shared}*1024
                        let Private=${Private}*1024
                        let Sum=${Shared}+${Private}

                        echo -e "$Private + $Shared = $Sum \t $Name"
                fi
        fi
fi
}

#this function make conversion from bytes to Kb or Mb or Gb
convert()
{
value=$1
power=0
#if value 0, we make it like 0.00
if [ "$value" = "0" ];
then
        value="0.00"
fi

#We make conversion till value bigger than 1024, and if yes we divide by 1024
while [ $(echo "${value} > 1024"|bc) -eq 1 ]
do
        value=$(echo "scale=2;${value}/1024" |bc)
        let power=$power+1
done

#this part get b,kb,mb or gb according to number of divisions
case $power in
        0) reg=b;;
        1) reg=kb;;
        2) reg=mb;;
        3) reg=gb;;
esac

echo -n "${value} ${reg} "
}



#if argument passed script will show statistic only for that pid, of not ï¿½ we list all processes in /proc/ #and get statistic for all of them, all result we store in file /tmp/res
if [ $# -eq 0 ]
then
        pids=`ls /proc | grep -e [0-9] | grep -v [A-Za-z] `
        for i in $pids
        do
        get_process_mem $i >> "$aaa_work_dir/res"
        done
else
        get_process_mem $1>> "$aaa_work_dir/res"
fi


#This will sort result by memory usage
cat "$aaa_work_dir/res" | sort -gr -k 5 > "$aaa_work_dir/res2"

#this part will get uniq names from process list, and we will add all lines with same process list
#we will count nomber of processes with same name, so if more that 1 process where will be
# process(2) in output
for Name in `cat "$aaa_work_dir/res2" | awk '{print $6}' | sort | uniq`
do
count=`cat "$aaa_work_dir/res2" | awk -v src=$Name '{if ($6==src) {print $6}}'|wc -l| awk '{print $1}'`
if [ $count = "1" ];
then
        count=""
else
        count="(${count})"
fi

VmSizeKB=`cat "$aaa_work_dir/res2" | awk -v src=$Name '{if ($6==src) {print $1}}' | paste -sd+ | bc`
VmRssKB=`cat "$aaa_work_dir/res2" | awk -v src=$Name '{if ($6==src) {print $3}}' | paste -sd+ | bc`
total=`cat "$aaa_work_dir/res2" | awk '{print $5}' | paste -sd+ | bc`
Sum=`echo "${VmRssKB}+${VmSizeKB}"|bc`
#all result stored in "$aaa_work_dir/res3 file"
echo -e "$VmSizeKB + $VmRssKB = $Sum \t ${Name}${count}" >>"$aaa_work_dir/res3"
done


#this make sort once more.
cat "$aaa_work_dir/res3" | sort -gr -k 5 | uniq > "$aaa_work_dir/res"

#now we print result , first header
echo -e "Private \t + \t Shared \t = \t RAM used \t Program"
#after we read line by line of temp file
while read line
do
        echo $line | while read a b c d e f
        do
#we print all processes if Ram used if not 0
                if [ $e != "0" ]; then
#here we use function that make conversion
                echo -en "`convert $a` \t $b \t `convert $c` \t $d \t `convert $e` \t $f"
                echo ""
                fi
        done
done < "$aaa_work_dir/res"

#this part print footer, with counted Ram usage
echo "--------------------------------------------------------"
echo -e "\t\t\t\t\t\t `convert $total`"
echo "========================================================"

# we clean temporary file
[[ -f "$aaa_work_dir/res" ]] && rm -f "$aaa_work_dir/res"
[[ -f "$aaa_work_dir/res2" ]] && rm -f "$aaa_work_dir/res2"
[[ -f "$aaa_work_dir/res3" ]] && rm -f "$aaa_work_dir/res3"
